version: '3'

services:

  mongo:
    image: mongo
    container_name: mongoDb
    restart: always
    ports:
      - 27017:27017
    networks:
      - production-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root

  webcrawlertwitter:
    build:
      context: .
      dockerfile: ./docker-imgs/webCrawlerTwitter.dockerfile
    container_name: webCrawlerTwitter
    restart: always
    
    networks:
      - production-network
    depends_on:
      - mongo

  mongoExpress:
    image: mongo-express
    container_name: mongoExpress
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
    networks:
      - production-network
    depends_on:
      - mongo

  db:
        image: mysql:5.7
        command: --character-set-server=utf8 --collation-server=utf8_unicode_ci
        command: --event-scheduler=ON
        container_name: mysql
        volumes:
                - ./db_data:/var/lib/mysql
                - ./scripts/mysql/generateTablesViewsSarg.sql:/tmp/generateTablesViewsSarg.sql
        environment:
                MYSQL_ROOT_PASSWORD: root
                MYSQL_DATABASE: sarg
                MYSQL_USER: root
                MYSQL_PASSWORD: root
        ports:
                - "3306:3306"
        expose:
                - "3306/tcp"
        networks:
                - production-network
        restart: always
  web:
        build:
                context: .
                dockerfile: ./docker-imgs/sarg.dockerfile
        container_name: sarg
        command: bash -c "python manage.py makemigrations && python manage.py migrate && gunicorn sarg.wsgi -b 0.0.0.0:80"
        volumes:
                - ./sarg:/sarg
                - ./sarg/media/media/:/media/media
        expose:
                - "80"
        networks:
                - production-network
        restart: always
        depends_on:
                - db
  reverse-proxy:
        image: nginx:1.15.2
        container_name: nginx
        volumes:
                - ./sarg:/sarg
                - ./conf/nginx/etc/nginx/conf.d:/etc/nginx/conf.d
                - ./sarg/sarg/static:/static
        ports:
                - "80:80"
        networks:
                - production-network
        depends_on:
                - web
networks:                
        production-network:
                driver: bridge
