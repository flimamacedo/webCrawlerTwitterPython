version: '3'

services:

  db:
    image: mysql:5.7
    command: --character-set-server=utf8 --collation-server=utf8_unicode_ci
    command: --event-scheduler=ON
    container_name: db
    # Use it to have a no ephemeral filesystem to your data 
    #volumes:
    #  - .mysql/data:/var/lib/mysql
    environment:  
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}  
    ports:
      - "3306"
    networks:
      - case-itau
    restart: always        

  sarg-backend:
    build:
      context: .
      dockerfile: ./sarg/Dockerfile
    container_name: sarg
    command: bash -c "python manage.py makemigrations && python manage.py migrate && gunicorn sarg.wsgi -b 0.0.0.0:80"
    volumes:
      - ./sarg/app:/sarg
      - ./sarg/app/media/media/:/media/media
    ports:
      - "80"
    networks:
      - case-itau
    restart: always
    depends_on:
      - db    

  web_crawler-backend:
    container_name: web_crawler
    build:
      context: webCrawlerTwitter/
    container_name: webCrawlerTwitter
    restart: always
    environment:
      CONSUMER_KEY: ${CONSUMER_KEY}
      CONSUMER_SECRET: ${CONSUMER_SECRET}
      ACCESS_TOKEN: ${ACCESS_TOKEN}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      HOST: ${HOST}
      USER: ${USER}
      PASSWD: ${PASSWD}
      DATABASE: ${DATABASE}     
    networks:
      - case-itau
    depends_on:
      - sarg-backend
  
  reverse_proxy-frontend:
    image: nginx:1.15.2
    container_name: nginx
    volumes:
      - ./sarg/app:/sarg
      - ./nginx/logs:/var/log/nginx
      - ./nginx/etc/nginx/conf.d:/etc/nginx/conf.d
      - ./sarg/app/sarg/static:/static
    ports:
      - "80:80"
    networks:
      - case-itau
    restart: always
    depends_on:
      - sarg-backend

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: ${ELK_VERSION}
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true        
      # Use it to have a no ephemeral filesystem to your data 
      #- ./elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - case-itau

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELK_VERSION: ${ELK_VERSION}
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - case-itau
    depends_on:
      - elasticsearch

  kibana:
    container_name: kibana
    build:
      context: kibana/
      args:
        ELK_VERSION: ${ELK_VERSION}
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - case-itau
    depends_on:
      - elasticsearch

  filebeat:
    container_name: filebeat
    build:
      context: filebeat/
      args:
        ELK_VERSION: 7.10.1
    volumes:
      - type: bind
        source: ./filebeat/config/filebeat.yml
        target: /usr/share/filebeat/config/filebeat.yml
        read_only: true    
      - ./nginx/logs:/var/log/nginx      
    restart: always
    networks:
      - case-itau
    depends_on:
      - elasticsearch     

networks:
  case-itau:
    driver: bridge
              
